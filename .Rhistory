?ts
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
sales_x <- read_excel("data.xlsx")
View(sales_x)
sales_x <- ts(sales_x, start = c(2014,01), frequency = 7)
sales_x <- ts(sales_x, start = c(2014,01,01), frequency = 7)
sales_x <- ts(sales_x, start = c(2014), frequency = 7)
sales_x <- ts(sales_x, frequency = 7)
sales_x <- ts(sales_x, start= c(1959,1), frequency = 365)
sales_x <- ts(sales_x, start= c(2000,1), frequency = 365)
sales_x <- ts(sales_x, start= c(2007,1), frequency = 365)
View(sales_x)
# Grafico de datos en niveles
ts.plot(scale(sales_x), col = c(1, 2),  lwd = c(1, 2)) #la roja
View(sales_x)
# Prueba de estacionariedad para el ipc
ur.kpss(sales_x[,1]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales_x[,1])) %>% summary() # los datos diferenciados si son estacionarios
# Prueba de estacionariedad para el petróleo
ur.kpss(sales_x[,2]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(sales_x[,2])) %>% summary() # los datos diferenciados si son estacionarios
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2007,1), frequency = 365)
# Grafico de datos en niveles
ts.plot(scale(data_x), col = c(1, 2),  lwd = c(1, 2)) #la roja es el petroleo
ur.kpss(data_x[,1]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,1])) %>% summary() # los datos diferenciados si son estacionarios
# Prueba de estacionariedad para el petróleo
ur.kpss(data_x[,2]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,2])) %>% summary() # los datos diferenciados si son estacionarios
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(data_x[,1], xreg = data_x[,2], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(data_x[,1], xreg = data_x[,2], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
checkresiduals(modelo_x) # Los residuales no estan correlacionados
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2007,1), frequency = 251)
data_x <- ts(data_x, start= c(2000,1), frequency = 251)
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
# Grafico de datos en niveles
ts.plot(scale(data_x), col = c(1, 2),  lwd = c(1, 2)) #la roja es el petroleo
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(data_x[,1], xreg = data_x[,2], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
data_x <- ts(data_x, start= c(2001,1), frequency = 7)
data_x <- ts(data_x, start= c(2001,1), frequency = 1)
data_x <- ts(data_x, start= c(2001,1), frequency = 4)
data_x <- ts(data_x, start= c(2001,1), frequency = 15)
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
checkresiduals(modelo_x) # Los residuales no estan correlacionados
?autplot
?autoplot
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
# Grafico de datos en niveles
ts.plot(scale(data_x), col = c(1, 2),  lwd = c(1, 2)) #la roja es el petroleo
# Prueba de estacionariedad para el ipc
ur.kpss(data_x[,1]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,1])) %>% summary() # los datos diferenciados si son estacionarios
# Prueba de estacionariedad para el petróleo
ur.kpss(data_x[,2]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,2])) %>% summary() # los datos diferenciados si son estacionarios
##
# Modelo ARIMAX
##
# AR representa una regresion de la variable contra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# X representa una variable o un conjunto de variables explicativas
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(data_x[,1], xreg = data_x[,2], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
checkresiduals(modelo_x) # Los residuales no estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x, xreg = rep(mean(data_x[,2]),15), h=15), include = 60)
# Pronóstico
autoplot(forecast(modelo_x, xreg = rep(mean(data_x[,2]),5), h=5), include = 60)
# Pronóstico
autoplot(forecast(modelo_x, xreg = rep(mean(data_x[,2]),5), h=5), include = 30)
################################################
# Con este código se pueden pronósticar series de tiempo multivariadas
#
## Funciones de transferencia utilizando el Indice Global de la Activida Económica
#
# Hecho por Mauricio Montiel el 10/04/2020
###############################################
# Preliminares
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
# Grafico de datos en niveles
ts.plot(scale(data_x), col = c(1, 2),  lwd = c(1, 2)) #la roja es el petroleo
# Prueba de estacionariedad para el ipc
ur.kpss(data_x[,1]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,1])) %>% summary() # los datos diferenciados si son estacionarios
# Prueba de estacionariedad para el petróleo
ur.kpss(data_x[,2]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,2])) %>% summary() # los datos diferenciados si son estacionarios
##
# Modelo ARIMAX
##
# AR representa una regresion de la variable contra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# X representa una variable o un conjunto de variables explicativas
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Selección automatica del modelo ARIMA
modelo_x <- auto.arima(data_x[,1], xreg = data_x[,2], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
checkresiduals(modelo_x) # Los residuales no estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x, xreg = rep(mean(data_x[,2]),5), h=5), include = 30)
# Pronóstico
autoplot(forecast(modelo_x, xreg = rep(mean(data_x[,2]),5), h=5), include = 30)
summary(modelo_x)
oil_lag <- cbind(
AdLag9 = data_x[,"oil"],
AdLag10 = stats::lag(data_x[,"oil"],-10),
AdLag11 = stats::lag(data_x[,"oil"],-11),
AdLag12 = stats::lag(data_x[,"oil"],-12)) %>%
head(NROW(data_x))
View(oil_lag)
oil_lag <- cbind(
AdLag9 = stats::lag(data_x[,"oil"],-9),
AdLag10 = stats::lag(data_x[,"oil"],-10),
AdLag11 = stats::lag(data_x[,"oil"],-11),
AdLag12 = stats::lag(data_x[,"oil"],-12)) %>%
head(NROW(data_x))
View(oil_lag)
View(oil_lag)
View(oil_lag)
# Restrict data so models use same fitting period
fit1 <- auto.arima(data_x[10:4848,1], xreg=Advert[10:4848,1],
stationary=TRUE)
# Restrict data so models use same fitting period
fit1 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1],
stationary=TRUE)
fit2 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,2],
stationary=TRUE)
fit3 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,3],
stationary=TRUE)
fit4 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,4],
stationary=TRUE)
#chose the best
c(fit1[["aicc"]],fit2[["aicc"]],fit3[["aicc"]],fit4[["aicc"]])
# Restrict data so models use same fitting period
fit1 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1],
stationary=TRUE)
fit2 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:2],
stationary=TRUE)
fit3 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:3],
stationary=TRUE)
fit4 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:4],
stationary=TRUE)
#chose the best
c(fit1[["aicc"]],fit2[["aicc"]],fit3[["aicc"]],fit4[["aicc"]])
modelo_x <- auto.arima(data_x[,1], xreg = oil_lag[,1:3], seasonal=T, stepwise=T, approximation=T)
oil_lag[,1:3]
modelo_x <- auto.arima(data_x[,1], xreg = oil_lag[4:4848,1:3], seasonal=T, stepwise=T, approximation=T)
data_x[,1]
View(oil_lag)
remove(list = ls())
setwd("~/GitHub/Forecasting/ARIMAX-Lagged-Predictors/")
#librerías
library(readxl)
library(tidyverse)
library(tseries)
library(urca)
library(forecast)
# Importar datos
data_x <- read_excel("data.xlsx")
data_x <- ts(data_x, start= c(2001,1), frequency = 251)
# Grafico de datos en niveles
ts.plot(scale(data_x), col = c(1, 2),  lwd = c(1, 2)) #la roja es el petroleo
# Prueba de estacionariedad para el ipc
ur.kpss(data_x[,1]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,1])) %>% summary() # los datos diferenciados si son estacionarios
# Prueba de estacionariedad para el petróleo
ur.kpss(data_x[,2]) %>% summary() #los datos en niveles no son estacionarios
ur.kpss(diff(data_x[,2])) %>% summary() # los datos diferenciados si son estacionarios
##
# Modelo ARIMAX
##
# AR representa una regresion de la variable contra valores pasados de ella misma
# MA representa la media movil ponderada de los errores pasados del pronóstico.
# X representa una variable o un conjunto de variables explicativas
# Combinando los dos modelos
# p = parte autorregresiva
# d = grado de difenrenciacion
# q = parte media movil
# Lagged predictors. Test 0, 1, 2 or 3 lags.
oil_lag <- cbind(
AdLag9 = stats::lag(data_x[,"oil"],-9),
AdLag10 = stats::lag(data_x[,"oil"],-10),
AdLag11 = stats::lag(data_x[,"oil"],-11),
AdLag12 = stats::lag(data_x[,"oil"],-12)) %>%
head(NROW(data_x))
View(oil_lag)
tats::lag(data_x[,"oil"],-9)
stats::lag(data_x[,"oil"],-9)
oil_lag <- cbind(
AdLag9 = stats::lag(data_x[,"oil"],-9),
AdLag10 = stats::lag(data_x[,"oil"],-10),
AdLag11 = stats::lag(data_x[,"oil"],-11),
AdLag12 = stats::lag(data_x[,"oil"],-12)) %>%
head(NROW(data_x))
fit1 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1],
stationary=TRUE)
fit2 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:2],
stationary=TRUE)
fit3 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:3],
stationary=TRUE)
fit4 <- auto.arima(data_x[10:4848,1], xreg=oil_lag[10:4848,1:4],
stationary=TRUE)
#chose the best 1:3
c(fit1[["aicc"]],fit2[["aicc"]],fit3[["aicc"]],fit4[["aicc"]])
modelo_x <- auto.arima(data_x[4:4848,1], xreg = oil_lag[4:4848,1:3], seasonal=T, stepwise=T, approximation=T)
summary(modelo_x)
checkresiduals(modelo_x) # Los residuales no estan correlacionados
# Pronóstico
autoplot(forecast(modelo_x, xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(mean(modelo_x[,2]),5))), h=5), include = 30)
# Pronóstico
autoplot(forecast(modelo_x, xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(mean(modelo_x[,2]),5))), h=6), include = 30)
oil_lag[4848,1]
rep(mean(modelo_x[,2]),5)
modelo_x[,2]
# Pronóstico
autoplot(forecast(modelo_x, xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))), h=6), include = 30)
AdLag11=c(oil_lag[4848,3],rep(mean(data_x[,2]),5))), h=6), include = 30)
AdLag11=c(oil_lag[4848,3],rep(mean(data_x[,2]),5)), h=6), include = 30)
# Pronóstico
forecast(modelo_x,
xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5),
AdLag10=c(oil_lag[4848,2],rep(mean(data_x[,2]),5),
AdLag11=c(oil_lag[4848,3],rep(mean(data_x[,2]),5)), h=6))))
cbind(AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5),
AdLag10=c(oil_lag[4848,2],rep(mean(data_x[,2]),5),
AdLag11=c(oil_lag[4848,3],rep(mean(data_x[,2]),5)), h=6))
t <- cbind(AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5),
t <- cbind(AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5),
AdLag10=c(oil_lag[4848,2],rep(mean(data_x[,2]),5),
AdLag11=c(oil_lag[4848,3],rep(mean(data_x[,2]),5)), h=6)))
View(t)
AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5)
r<- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5)
r<- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5)
r<- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
r<- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
r<- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
r <- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
r <- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
p <- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
p <- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
p
p <- AdLag9=c(oil_lag[4848,1],rep(mean(data_x[,2]),5))
rep(mean(data_x[,2]),5)
data_x[,2]
mean(data_x[,2])
p <- AdLag9=c(oil_lag[4848,1],rep(
mean(data_x[,2])
mean(data_x[,2])
mean(data_x[,2])
(data_x[,2])
oil_lag[4848,1
oil_lag[4848,1]
oil_lag[4848,2]
oil_lag[4848,3]
oil_lag[4848,1]
View(oil_lag)
# Pronóstico
forecast(modelo_x,
xreg = cbind(AdLag9=c(oil_lag[4848,9],rep(mean(data_x[,2]),5),
AdLag10=c(oil_lag[4848,10],rep(mean(data_x[,2]),5),
AdLag11=c(oil_lag[4848,11],rep(mean(data_x[,2]),5)), h=6))))
# Pronóstico
forecast(modelo_x,
xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(27,5),
AdLag10=c(oil_lag[4848,2],rep(27,5),
AdLag11=c(oil_lag[4848,3],rep(27,5)), h=6))))
#chose the best 1:3
c(fit1[["aicc"]],fit2[["aicc"]],fit3[["aicc"]],fit4[["aicc"]])
oil_lag[,1]=c(oil_lag[4848,1],rep(27,5)
oil_lag[,1]=c(oil_lag[4848,1]
oil_lag[,1]=c(oil_lag[4848,1],rep(27,5)
oil_lag[,1]
oil_lag[,1]
forecast(modelo_x,
xreg = cbind(oil_lag[,1]=c(oil_lag[4848,1],rep(27,5),
oil_lag[,2]=c(oil_lag[4848,2],rep(27,5),
oil_lag[,3]=c(oil_lag[4848,3],rep(27,5)),
h=6))))
# Pronóstico
forecast(modelo_x,
xreg = cbind(oil_lag[,1]=c(oil_lag[4848,1],rep(27,5),
oil_lag[,2]=c(oil_lag[4848,2],rep(27,5),
oil_lag[,3]=c(oil_lag[4848,3],rep(27,5)), h=6))))
# Pronóstico
forecast(modelo_x,
xreg = cbind(oil_lag[,1] = c(oil_lag[4848,1],rep(27,5),
oil_lag[,2] = c(oil_lag[4848,2],rep(27,5),
oil_lag[,3] = c(oil_lag[4848,3],rep(27,5)), h=6))))
View(oil_lag)
# Pronóstico
forecast(modelo_x,
xreg = cbind(oil_lag[,"AdLag9"] = c(oil_lag[4848,1],rep(27,5),
oil_lag[,"AdLag10"] = c(oil_lag[4848,2],rep(27,5),
oil_lag[,"AdLag11"] = c(oil_lag[4848,3],rep(27,5)), h=6))))
cbind(oil_lag[,"AdLag9"] = c(oil_lag[4848,1],rep(27,5),
oil_lag[,"AdLag10"] = c(oil_lag[4848,2],rep(27,5),
oil_lag[,"AdLag11"] = c(oil_lag[4848,3],rep(27,5))
# Pronóstico
forecast(modelo_x,
xreg = cbind(oil_lag[4:4848,1] = c(oil_lag[4848,1],rep(27,5),
oil_lag[4:4848,2] = c(oil_lag[4848,2],rep(27,5),
oil_lag[4:4848,3] = c(oil_lag[4848,3],rep(27,5)), h=6))))
oil_lag[4:4848,3]
# Pronóstico
forecast(modelo_x,
xreg = cbind(AdLag9=c(oil_lag[4848,1],rep(27,5),
AdLag10=c(oil_lag[4848,2],rep(27,5),
AdLag11=c(oil_lag[4848,3],rep(27,5)), h=6))))
c(oil_lag[4848,1],rep(27,5)
oil_lag[4848,1]
oil_lag[4848,1]
rep(27,5)
c(oil_lag[4848,1],rep(27,5)
c <- c(oil_lag[4848,1],rep(27,5)
c <- c(oil_lag[4848,1],rep(27,5)
c <- c(oil_lag[4848,1],rep(27,5))
c <- c(oil_lag[4848,1],rep(27,5))
c
